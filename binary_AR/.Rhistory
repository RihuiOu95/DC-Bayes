}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n) * 10
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n) * 5
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n) * 1
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n) * 1
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n) * 10
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + rnorm(n)
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 10
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 500
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 20
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 5
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 2
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
plot(res)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res, nbins=10)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res, nbins=10)
?hist
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 3
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 100
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 10
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n) * 5
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
p = 20
n = 1000
data = matrix(0,n,p)
for (i in 1:p){
data[,i] = rnorm(n)
#data$z = sample(0:1, n, replace = T)
#data$y = rowSums(data) + rnorm(n,0,100)
}
z = sample(0:1,n,replace = T) * 10
data = cbind(data,z)
eps = rnorm(n)
y = rowSums(data) + eps
data = cbind(data, y)
data = data.frame(data)
mdl = lm(y~.-1-z,data=data)
res = mdl$residuals
hist(res,breaks=30)
?glm
8 / sqrt(250)
20 * 250 / 64
1000 / 64
8 / sqrt(7)
8 / sqrt(64)
8 / sqrt(15)
?dpois
dpois(15,20)
ppois(15,20)
720 / 31
720 / 32
1 / (23.5)
720 /32
1 / 23.5
270^2
72900 / 90000
-(10 * 0.8 * 0.6 * 0.7 - 4 * 0.8 * 0.7 * 0.8) / 0.49
log(e\)
log(e)
log(exp(1))
log(10)-ln(0.9/0.99)
log(10)-log(0.9/0.99)
x = log(0.9/0.99)
1000 * x / 2.397895
x
-1000 * x / 2.397895
0.7 / sqrt(0.02)
pnorm(0.3, sqrt(0.02))
?pnom
?pnorm
sqrt(0.02)
0.3 / sqrt(0.02)
qnorm(2.12)
1-pnorm(2.12)
43 / 4.5
log(50)
3.9 - 2
1.9 / 2
1-pnorm(.95)
pnorm(.95)
pnorm(2)
pnorm(1)
pnorm(1,0,1)
log(50)
pnorm(0)
pnorm(-1)
pnorm(-2)
pnorm(-3)
pnorm(1)
p = 1-pnorm(3.0, 2, 2)
p
p = 1-pnorm(log(50), 2, 2)
p
p * 15
pnorm((log(50) - 2) / 2)
1-pnorm((log(50) - 2) / 2)
0.1695332 * 15
8.75 / 2
21/4
pnorm(0.3 / sqrt(0.02))
1-pnorm(0.3 / sqrt(0.02))
sqrt(0.02)
qnorm(3)
qnorm(0.99)
library(dplyr)
library(rstan)
library(reticulate)
install.packages("reticulate")
install.packages("RcppTOML")
install.packages("~/DC-BATS-deborshee/binary_AR/reticulate_1.14.tar.gz", repos = NULL, type = "source")
library(dplyr)
library(rstan)
library(reticulate)
setwd("~/DC-BATS-deborshee/binary_AR")
py_load_object('data.pkl')
python_dat = py_load_object('data.pkl')
View(python_dat)
python_dat = py_load_object('data.pkl')
p = 2
q = 2
d = 10
T0 = 10000
y = rnorm(T0)
X = matrix(0, d, T0)
data = list(T=T0, p=p, q=q, r=max(p,q), d=d, y=y, X=X, power=1.)
model = stan_model(file = 'garch_WB.stan')
python_dat = py_load_object('data.pkl')
p = 10
q = 5
y = python_dat$y
X = python_dat$X
T = len(y)
python_dat = py_load_object('data.pkl')
p = 10
q = 5
y = python_dat$y
X = python_dat$X
T = length(y)
data = list(T=T, p=p, q=q, y=y, X=X, power=1.)
model = stan_model(file = 'model_binaryAR.stan.stan')
python_dat = py_load_object('data.pkl')
p = 10
q = 5
y = python_dat$y
X = python_dat$X
T = length(y)
data = list(T=T, p=p, q=q, y=y, X=X, power=1.)
model = stan_model(file = 'model_binaryAR.stan')
fit = optimizing(model, data = data, hessian = TRUE, verbose = T)
fit$hessian
-fit$hessian
inv(-fit$hessian)
fit$value
fit$par
fit$par, fit$hessian
fit$par
x = fit$par
mode = fit$par
hessoan = fit$hessian
mode = fit$par
hessian = fit$hessian
mode = fit$par
hessian = fit$hessian
names(fit$par)
mode = fit$par
hessian = fit$hessian
var_names = names(fit$par)
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(dplyr)
library(rstan)
library(reticulate)
library(dplyr)
library(rstan)
library(reticulate)
library(jsonlite)
library(dplyr)
library(rstan)
library(jsonlite)
library(dplyr)
library(rstan)
library(jsonlite)
